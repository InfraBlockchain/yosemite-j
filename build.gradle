/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.9/userguide/java_library_plugin.html
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'maven-publish'
    id "net.ltgt.apt" version "0.10"
}

ext {

    rxJavaVer = ' 2.1.2 '

    retrofitVer = '2.3.0'
    okHttpVer = '3.9.0'

    gsonVer = '2.8.1'
}

dependencies {

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'org.apache.commons:commons-lang3:3.7'

    implementation 'com.google.guava:guava:23.0'

    implementation "io.reactivex.rxjava2:rxjava:${rxJavaVer}"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:${retrofitVer}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofitVer}"
    implementation "com.squareup.retrofit2:converter-gson:${retrofitVer}"

    implementation "com.google.code.gson:gson:${gsonVer}"

    implementation "com.google.dagger:dagger:2.17"
    annotationProcessor "com.google.dagger:dagger-compiler:2.17"

    // okHttp
    implementation "com.squareup.okhttp3:okhttp:${okHttpVer}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okHttpVer}"

    implementation group: 'commons-collections', name: 'commons-collections', version: '3.2'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.2'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
    maven {
        name "YosemiteLabs Release"
        url "http://backoffice.yosemitelabs.org:8081/repository/maven-releases/"
    }
    maven {
        name "YosemiteLabs Snapshot"
        url "http://backoffice.yosemitelabs.org:8081/repository/maven-snapshots/"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

version = '0.5.1-SNAPSHOT'
group = 'org.yosemitelabs'

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'http://backoffice.yosemitelabs.org:8081/repository/maven-releases/') {
                authentication(userName: 'deploy', password: '1qazxsw2')
            }
            snapshotRepository(url: 'http://backoffice.yosemitelabs.org:8081/repository/maven-snapshots/') {
                authentication(userName: 'deploy', password: '1qazxsw2')
            }
        }
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'yosemitej'
            from components.java
            pom {
                name = 'Yosemite Java SDK'
                description = 'The project\'s goal would be something like Java version of clyos which provides convenient interfaces for the useful commands such as pushing action including some native actions of Yostemite Public Blockchain'
                url = 'http://yosemitex.com'
            }
        }
    }
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

test {
    testLogging {
        showStandardStreams true
        exceptionFormat 'full'
    }
}

task sample(type: JavaCompile, dependsOn: build) {
    source = fileTree(dir: 'sample', include: '**/*.java')
    classpath = files("$buildDir/classes/java/main")
    destinationDir = file("$buildDir/classes/java/main")
}

task runSample(type: JavaExec, dependsOn: sample) {
    if (project.hasProperty('pargs')) {
        args(pargs.split(','))
    }
    doFirst {
        main = 'io.yosemite.sample.' + mainClass
        classpath = sourceSets.main.runtimeClasspath
    }
}
