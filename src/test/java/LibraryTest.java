/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.yosemitex.data.remote.model.api.*;
import org.yosemitex.data.remote.model.chain.*;
import org.yosemitex.services.EosApiRestClient;
import org.yosemitex.services.EosApiRestClientImpl;
import org.yosemitex.util.Utils;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class LibraryTest {

    final static Logger logger = LoggerFactory.getLogger(LibraryTest.class);

    @Before
    public void before() throws Exception {

    }

    @Test
    public void testRestApiClientTest() {

        EosApiRestClient apiClient = new EosApiRestClientImpl("http://127.0.0.1:8888");

        // Push Contract Tx by packing the data

        String contract = "eosio.token"; // sometimes called `code`
        String action = "transfer";
        String args = "{\"from\":\"user\",\"to\":\"tester\",\"quantity\":\"1.0000 SYS\",\"memo\":\"wow\"}";
        String[] permissions = new String[]{"user@active"};

        AbiJsonToBinReq abiJsonToBinReq = new AbiJsonToBinReq(contract, action, args);

        Info info = apiClient.getInfo();

        logger.debug(info.getBrief());

        AbiJsonToBinRes abiJsonToBinRes = apiClient.abiJsonToBin(abiJsonToBinReq);

        logger.debug(abiJsonToBinRes.getBinargs());

        Action actionReq = new Action(contract, action);
        actionReq.setAuthorization(permissions);
        actionReq.setData(abiJsonToBinRes.getBinargs());

        SignedTransaction txReq = new SignedTransaction();
        txReq.addAction(actionReq);
        txReq.setReferenceBlock(info.getHeadBlockId());
        txReq.setExpiration(info.getTimeAfterHeadBlockTime(300000));

        List<String> pubKeys = new ArrayList<>();
        pubKeys.add("EOS8ePyQrK7XZKUKSbhKuGVCLc4XfFp4N3sf3uCZSsEDTzZXLfNVj");

        GetRequiredKeysReq getRequiredKeysReq = new GetRequiredKeysReq(txReq, pubKeys);

        GetRequiredKeysRes getRequiredKeysRes = apiClient.getRequiredKeys(getRequiredKeysReq);

        List<String> keys = getRequiredKeysRes.getRequiredKeys();

        for (String key : keys) {
            logger.debug("Pub key: " + key);
        }

        SignedTransaction signedTx = apiClient.signTransaction(txReq, keys, info.getChainId());

        logger.debug("\nSigned Transaction:\n" + Utils.prettyPrintJson(signedTx));

        PackedTransaction packedTx = new PackedTransaction(signedTx);

        logger.debug("\nPacked Transaction:\n" + Utils.prettyPrintJson(packedTx));

        PushedTransaction pushedTransaction = apiClient.pushTransaction(packedTx);

        logger.debug("\nPushed Transaction:\n" + Utils.prettyPrintJson(pushedTransaction));

        assertTrue("Success", true);
    }
}
